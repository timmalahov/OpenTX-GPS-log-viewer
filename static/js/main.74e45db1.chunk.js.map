{"version":3,"sources":["utilities/LogItemEnum.ts","components/dragndrop/component.tsx","utilities/csvToJSONConverter.ts","components/open-street-map/component.tsx","components/sidebar/component.tsx","components/home/component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SensorType","MyDropzone","onFileLoaded","minified","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","readAsText","useDropzone","accept","maxFiles","getRootProps","getInputProps","isDragAccept","isDragActive","isDragReject","className","convertCSVToJSON","csv","lines","split","headers","i","length","obj","currentline","j","push","containerStyle","width","height","colorGradient","Gradient","setGradient","OSMComponent","logInfo","useState","map","setMap","path","filter","item","GPS","lat","Number","lng","highest","reduce","prev","current","Alt","setMidpoint","Math","floor","MapContainer","center","zoom","style","whenCreated","TileLayer","attribution","url","logArray","acc","cur","index","arr","start","end","panTo","line","colorSourceData","Polyline","pathOptions","color","getColor","stroke","positions","Date","Time","getPolylines","React","memo","Sidebar","props","children","Home","gpsData","setGpsData","fileContent","fileContentArray","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74e45db1.chunk.js","sourcesContent":["export enum SensorType {\n    Date = 'Date',\n    Time = 'Time',\n    FM = 'FM',\n    RSS_one = '1RSS(dB)',\n    RSS_two = '2RSS(dB)',\n    RQly = 'RQly(%)',\n    RSNR = 'RSNR(dB)',\n    ANT = 'ANT',\n    RFMD = 'RFMD',\n    TPWR = 'TPWR(mW)',\n    TRSS = 'TRSS(dB)',\n    TQly = 'TQly(%)',\n    TSNR = 'TSNR(dB)',\n    Ptch = 'Ptch(rad)',\n    Roll = 'Roll(rad)',\n    Yaw = 'Yaw(rad)',\n    RxBt = 'RxBt(V)',\n    Curr = 'Curr(A)',\n    Capa = 'Capa(mAh)',\n    Bat_ = 'Bat_(%)',\n    GPS = 'GPS',\n    GSpd = 'GSpd(kmh)',\n    Hdg = 'Hdg(@)',\n    Alt = 'Alt(m)',\n    Sats = 'Sats',\n    Rud = 'Rud',\n    Ele = 'Ele',\n    Thr = 'Thr',\n    Ail = 'Ail',\n    SA = 'SA',\n    SB = 'SB',\n    SC = 'SC',\n    SD = 'SD',\n    SE = 'SE',\n    SF = 'SF',\n    LSW = 'LSW',\n    TxBat = 'TxBat(V)'\n};\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { DropzoneOptions, useDropzone } from 'react-dropzone';\nimport { DndComponentProprsInterface } from './DndComponentProprsInterface';\n\nconst MyDropzone: FunctionComponent<DndComponentProprsInterface> = ({\n    onFileLoaded,\n    minified = false,\n}: DndComponentProprsInterface) => {\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file: DropzoneOptions['onDrop']) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n      reader.onerror = () => console.log('file reading has failed');\n      reader.onload = () => {\n\n        const binaryStr = reader.result;\n        if (onFileLoaded) {\n          onFileLoaded(binaryStr as string);\n        }\n      };\n      // @ts-ignore\n      reader.readAsText(file);\n    });\n  }, []);\n  const {\n      getRootProps,\n      getInputProps,\n      isDragActive,\n      isDragAccept,\n      isDragReject,\n  } = useDropzone({\n      onDrop,\n      accept: 'text/csv',\n      maxFiles: 1,\n  });\n\n  // {isDragAccept && (<p>All files will be accepted</p>)}\n  // {isDragReject && (<p>Some files will be rejected</p>)}\n  // {!isDragActive && (<p>Drop some files here ...</p>)}\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      <div className={`dropzone ${isDragAccept ? ' accept' : ''} ${isDragReject ? ' reject' : ''}`}>\n        {\n          isDragReject\n            ? (\n                  <p>\n                      {\n                          minified\n                              ? `Not allowed`\n                              : `Unexpected file type. Please make sure you're using .csv files`\n                      }\n                  </p>\n              )\n            : (\n                  <p>\n                      {\n                          minified\n                              ? `Drop new file here`\n                              : `Drag'n'drop log file here, or click to select files`\n                      }\n                  </p>\n              )\n\n          // !isDragActive\n          // ? (\n          //    <p>\n          //        {\n          //            minified\n          //                ? `Drop new file here`\n          //                : `Drag'n'drop log file here, or click to select files`\n          //        }\n          //    </p>\n          //   )\n          // : ''\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default MyDropzone;\n","import {LogItemInterface} from \"./logItem\";\n\nconst convertCSVToJSON = (csv: string): Array<LogItemInterface> | null => {\n  const lines = csv.split('\\n');\n  const result = [];\n\n  // NOTE: If your columns contain commas in their values, you'll need\n  // to deal with those before doing the next step\n  // (you might convert them to &&& or something, then covert them back later)\n  // jsfiddle showing the issue https://jsfiddle.net/\n  const headers = lines[0].split(',');\n\n  // eslint-disable-next-line no-plusplus\n  for (let i = 1; i < lines.length; i++) {\n    const obj = {};\n    const currentline = lines[i].split(',');\n\n    // eslint-disable-next-line no-plusplus\n    for (let j = 0; j < headers.length; j++) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      obj[headers[j]] = currentline[j];\n    }\n    result.push(obj);\n  }\n\n  // return JSON.stringify(result);\n  return result;\n};\n\nexport default convertCSVToJSON;\n","import React, {FunctionComponent, useState} from 'react';\n// @ts-ignore\nimport Gradient from 'javascript-color-gradient';\nimport {LogItemInterface} from '../../utilities/logItem';\nimport {OpenStreetMapComponentPropsInterface} from \"./OpenStreetMapComponentPropsInterface\";\nimport {MapContainer, Polyline, TileLayer} from \"react-leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport {Map as LeafletMap} from \"leaflet\";\nimport {SensorType} from \"../../utilities/LogItemEnum\";\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%',\n};\n\nconst colorGradient = new Gradient();\n\nconst color1 = '#004ad4';\nconst color2 = '#00e6ff';\nconst color3 = '#00ff9b';\nconst color4 = '#00d42d';\nconst color5 = '#54ff00';\nconst color6 = '#ffd300';\nconst color7 = '#ff000b';\n\ncolorGradient.setGradient(\n  color1,\n  color2,\n  color3,\n  color4,\n  color5,\n  color6,\n  color7\n);\n\n// eslint-disable-next-line react/prop-types\nconst OSMComponent: FunctionComponent<OpenStreetMapComponentPropsInterface> = ({\n  logInfo,\n}: OpenStreetMapComponentPropsInterface) => {\n\n  const [map, setMap] = useState<LeafletMap | null>(null);\n\n  const path = logInfo\n    .filter((item) => !!item.GPS)\n    .map((item) => ({\n      lat: Number(item.GPS.split(' ')[0]),\n      lng: Number(item.GPS.split(' ')[1]),\n    }));\n\n  const highest = logInfo.reduce((prev, current) =>\n    Number(prev[SensorType.Alt] || '') > Number(current[SensorType.Alt] || '')\n      ? prev\n      : current\n  );\n\n  colorGradient.setMidpoint(Math.floor(Number(highest[SensorType.Alt]) * 0.66));\n  // colorGradient.setMidpoint(100);\n\n    const getPolylines = (logArray: Array<LogItemInterface>) => {\n    const lines = path.reduce((acc, cur, index, arr) => {\n      if (!arr[index + 1]) {\n        return acc;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      acc.push({ start: cur, end: arr[index + 1] });\n\n      return acc;\n    }, []);\n\n      // @ts-ignore\n      map?.panTo([lines[0].start.lat, lines[0].start.lng]);\n\n    return lines.map((line: any, index: number) => {\n      const colorSourceData =\n        Number(logArray[index + 1][SensorType.Alt]) > 0\n          ? logArray[index + 1][SensorType.Alt]\n          : 1;\n\n      return (\n        <Polyline\n          pathOptions={{\n              color: colorGradient.getColor(colorSourceData),\n              stroke: true,\n          }}\n          positions={[\n            [line.start.lat, line.start.lng],\n            [line.end.lat, line.end.lng],\n          ]}\n          key={`poly_${logInfo[index].Date}${logInfo[index].Time}`}\n        />\n      )\n    });\n  };\n\n    return (\n    <div className=\"map-container\">\n        <MapContainer\n            center={[51.505, -0.09]}\n            zoom={13}\n            style={containerStyle}\n            whenCreated={setMap}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n\n            {\n                getPolylines(logInfo)\n            }\n        </MapContainer>\n    </div>\n  );\n};\n\nexport default React.memo(OSMComponent);\n","import React, {FunctionComponent} from 'react';\nimport {SidebarComponentPropsInterface} from './SidebarComponentPropsInterface';\n\nconst Sidebar: FunctionComponent<SidebarComponentPropsInterface> = ({...props}) => {\n\n    return (\n        <div className=\"sidebar\">\n            {props.children}\n        </div>\n    );\n};\n\nexport default React.memo(Sidebar);\n","import React, {FunctionComponent, useCallback, useState} from 'react';\nimport {HomeComponentPropsInterface} from './HomeComponentPropsInterface';\nimport MyDropzone from \"../dragndrop/component\";\nimport convertCSVToJSON from \"../../utilities/csvToJSONConverter\";\nimport {LogItemInterface} from \"../../utilities/logItem\";\nimport OSMComponent from \"../open-street-map/component\";\nimport Sidebar from \"../sidebar/component\";\n\nconst Home: FunctionComponent<HomeComponentPropsInterface> = ({...props}) => {\n    const [gpsData, setGpsData] = useState< Array<LogItemInterface> | null>(null);\n\n    const onFileLoaded = useCallback((fileContent) => {\n        const fileContentArray = convertCSVToJSON(fileContent);\n\n        setGpsData(fileContentArray);\n    }, []);\n\n    // const handleReset = useCallback(() => {\n    //     setGpsData(null);\n    // }, []);\n\n    return (\n        <div className=\"container\">\n            {gpsData ? (\n                <>\n                     {/*<MapComponent logInfo={gpsData} />*/}\n                    <OSMComponent logInfo={gpsData} />\n                    <Sidebar>\n                        <div className=\"dropzone-container minified\">\n                            <MyDropzone\n                                onFileLoaded={onFileLoaded}\n                                minified/>\n                        </div>\n                        {/*<button type=\"submit\" className=\"reset-button\" onClick={handleReset}>*/}\n                        {/*    Reset*/}\n                        {/*</button>*/}\n                    </Sidebar>\n                </>\n            ) : (\n                <div className=\"dropzone-container\">\n                    <MyDropzone onFileLoaded={onFileLoaded} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default React.memo(Home);\n","import React from 'react';\nimport './App.css';\nimport Home from \"./components/home/component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}